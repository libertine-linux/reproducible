#!/usr/bin/env sh
# This file is part of reproducible. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/reproducible/master/COPYRIGHT. No part of reproducible, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2019 The developers of reproducible. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/reproducible/master/COPYRIGHT.


set -e
set -f
set -u

program_name="reproducible-chroot"

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				local recursionDepth=0
				_program_path_resolve_symlinks_recursively()
				{
					local unresolvedPath="$1"
					
					recursionDepth=$((recursionDepth + 1))
					
					if [ $recursionDepth -gt 10 ]; then
						printf '%s\n' 'Recursion to depths greater than 10 is not allowed when resolving links.'
						return 1
					fi
					
					local potentialLinkDestination="$(readlink -- "$unresolvedPath")"
					
					if [ -z "$potentialLinkDestination" ]; then
						scriptPath="$unresolvedPath"
						return 0
					fi
					local linkDestination="$potentialLinkDestination"
					local parentFolderPath="${unresolvedPath%/*}"
					
					if [ "$parentFolderPath" = "$unresolvedPath" ]; then
						_program_path_resolve_symlinks_recursively "$linkDestination"
					else
						case "$linkDestination" in
														
							/*)
								_program_path_resolve_symlinks_recursively "$linkDestination"
							;;
							
							*)
								_program_path_resolve_symlinks_recursively "$parentFolderPath"/"$linkDestination"
							;;
							
						esac
					fi
				}

				scriptPath="$0"
				_program_path_resolve_symlinks_recursively "$scriptPath"

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

fail()
{
	local exitCode="$1"
	local message="$2"
	
	printf '%s:FAIL:%s\n' "$program_name" "$message" 1>&2
	exit $exitCode
}

depends()
{
	local binary
	for binary in "$@"
	do
		if ! command -v "$binary" 1>/dev/null 2>/dev/null; then
			printf '%s:%s\n' "$program_name" "The binary `$binary` is not on the PATH" 1>&2
			local EX_OSFILE=72
			exit $EX_OSFILE
		fi
	done
}

depends env chroot
reproducible_chroot_run()
{
	set -- \
		PATH='/usr/sbin:/sbin:/usr/bin:/bin' \
		LOGNAME='currentuser' \
		USER='currentuser' \
		HOME='/home/currentuser' \
		LANG=C.UTF-8 \
		LANGUAGE=en_US:en \
		chroot . \
			/bin/su \
			-p \
			-s /bin/sh \
			-c 'exec /su-command' \
			currentuser
	if [ -t 1 ]; then
		set -- TERM="${TERM:-dumb}" "$@"
	fi

	set +e
		env -i "$@"
		exitCode=$?
	set -e
}

reproducible_chroot_mountRunAndUnmount()
{
	_reproducible_chroot_mountRunAndUnmount_cleanUp()
	{
		environment_recursivelyUnmountInChroot "$reproducible_chrootFolderPath"
	}

	cd "$reproducible_chrootFolderPath" 1>/dev/null 2>/dev/null

		trap _reproducible_chroot_mountRunAndUnmount_cleanUp EXIT HUP INT QUIT TERM

			local mountFromFolderPath
			local mountToFolderPath
			local recursiveMount
			while IFS=':' read -r mountFromFolderPath mountToFolderPath recursiveMount
			do
				case "$recursiveMount" in

					true|false)
						:
					;;

					'')
						continue
					;;

					*)
						fail 1 "Invalid mount data"
					;;

				esac

				environment_bindMount "$mountFromFolderPath" "${reproducible_chrootFolderPath}${mountToFolderPath}" "$recursiveMount"
			done <<-EOF
				${reproducible_mount}
			EOF

			environment_mountPseudoFileSystem proc "$reproducible_chrootFolderPath"/proc
			environment_recursivelyMount /sys "$reproducible_chrootFolderPath"/sys
			environment_recursivelyMount /dev "$reproducible_chrootFolderPath"/dev

			local exitCode
			reproducible_chroot_run "$@"

			_reproducible_chroot_mountRunAndUnmount_cleanUp

		trap - EXIT HUP INT QUIT TERM

		if [ $exitCode -ne 0 ]; then
			exit $exitCode
		fi

	cd - 1>/dev/null 2>/dev/null
}

reproducible_chroot_main()
{
	cd "$(_program_path_find)"/.. 1>/dev/null 2>/dev/null

	. "$(pwd)"/functions/reproducible.functions

	local environment_parseCommandLineArguments_message="${program_name}:  Enters an Alpine Linux chroot.

Usage: ${program_name} -h | --help
Usage: ${program_name} [-c|--configuration /path/to/configuration/folder] [-o|--output /path/to/output/folder [-m|--mount from1:to1:recursive1,from2:to2:recursive2]]

If the configuration folder path is not provided, it defaults to program_location/sample-configuration.

If the output folder path is not provided, it defaults to program_location/output. The output folder path is created as necessary.

The mount argument is a triplet of from folder path and to folder path and true/false for recursive mounting. It can be repeated.
from folder path and to folder path should not contain colons or new lines.
"
	local reproducible_mount=""
	_additionalArgumentsCallback()
	{
		case "$key" in
			-m|--mount)
				environment_parseCommandLineArguments_missingArgument "$@"
				reproducible_mount="${reproducible_mount}
${value}"
				_additionalArgumentsCallback_shiftUp=1
			;;

			--mount=*)
				value="${key##--mount=}"
				reproducible_mount="${reproducible_mount}
${value}"
			;;

			-m*)
				environment_parseCommandLineArguments_alreadyParsed $reproducible_configurationFolderPathParsed
				value="${key##-m}"
				reproducible_mount="${reproducible_mount}
${value}"
			;;

			*)
				environment_parseCommandLineArguments_errorHelp "Unexpected argument '$key'"
			;;
		esac
	}
	_positionalArgumentsCallback()
	{
		if [ $# -eq 0 ]; then
			environment_parseCommandLineArguments_errorHelp "At least one positional argument should be specified (an absolute path to a binary to run in the chroot)"
		fi
	}
	local reproducible_positionalArgumentsStartAt
	local reproducible_configurationFolderPath="$(pwd)"/sample-configuration
	local reproducible_outputFolderPath="$(pwd)"/output
	reproducible_parseCommandLineArguments _additionalArgumentsCallback _positionalArgumentsCallback "$@"
	
	reproducible_validateCommandLineArguments

	local reproducible_temporaryFolderPath
	local reproducible_versionFilePath
	local reproducible_packagesFilePath
	local reproducible_busyboxStaticBinariesFilePath
	local reproducible_mirrorFolderPath
	local reproducible_mirrorVersionFilePath
	local reproducible_indexFolderPath
	local reproducible_indexVersionFilePath
	local reproducible_packagesFolderPath
	local reproducible_packagesVersionFilePath
	local reproducible_extractedPackagesFolderPath
	local reproducible_extractedPackagesVersionFilePath
	local reproducible_extractedPackagesPackagesFilePath
	local reproducible_extractedPackagesBusyboxStaticBinariesFilePath
	local reproducible_extractedInitramfsFolderPath
	local reproducible_extractedInitramfsVersionFilePath
	local reproducible_majorVersion
	local reproducible_minorVersion
	local reproducible_revisionVersion
	local reproducible_apkToolsVersion
	local reproducible_versionMirror
	local reproducible_releasesMirror
	local reproducible_architecture
	local reproducible_chrootFolderPath
	reproducible_setEnvironmentVariables

	local reRunAsRoot=true

	if [ -n "${SUDO_UID+isset}" ]; then
		reRunAsRoot=false
	fi
	
	if $reRunAsRoot; then
		"$(pwd)"/support/alpine-linux-download --configuration "$reproducible_configurationFolderPath" --output "$reproducible_outputFolderPath"
		reproducible_createChroot
		reproducible_createSuCommandToRunAsCurrentUser "$@"
		environment_reRunAsRootIfRequired "$@"
	fi

	reproducible_chroot_mountRunAndUnmount
}

reproducible_chroot_main "$@"

#!/usr/bin/env sh
# This file is part of reproducible. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/reproducible/master/COPYRIGHT. No part of reproducible, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2019 The developers of reproducible. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/reproducible/master/COPYRIGHT.


set -e
set -f
set -u

program_name="alpine-linux-download"

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				local recursionDepth=0
				_program_path_resolve_symlinks_recursively()
				{
					local unresolvedPath="$1"
					
					recursionDepth=$((recursionDepth + 1))
					
					if [ $recursionDepth -gt 10 ]; then
						printf '%s\n' 'Recursion to depths greater than 10 is not allowed when resolving links.'
						return 1
					fi
					
					local potentialLinkDestination="$(readlink -- "$unresolvedPath")"
					
					if [ -z "$potentialLinkDestination" ]; then
						scriptPath="$unresolvedPath"
						return 0
					fi
					local linkDestination="$potentialLinkDestination"
					local parentFolderPath="${unresolvedPath%/*}"
					
					if [ "$parentFolderPath" = "$unresolvedPath" ]; then
						_program_path_resolve_symlinks_recursively "$linkDestination"
					else
						case "$linkDestination" in
														
							/*)
								_program_path_resolve_symlinks_recursively "$linkDestination"
							;;
							
							*)
								_program_path_resolve_symlinks_recursively "$parentFolderPath"/"$linkDestination"
							;;
							
						esac
					fi
				}

				scriptPath="$0"
				_program_path_resolve_symlinks_recursively "$scriptPath"

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

fail()
{
	local exitCode="$1"
	local message="$2"
	
	printf '%s:FAIL:%s\n' "$program_name" "$message" 1>&2
	exit $exitCode
}

depends()
{
	local binary
	for binary in "$@"
	do
		if ! command -v "$binary" 1>/dev/null 2>/dev/null; then
			printf '%s:%s\n' "$program_name" "The binary `$binary` is not on the PATH" 1>&2
			local EX_OSFILE=72
			exit $EX_OSFILE
		fi
	done
}

depends_binary()
{
	local binary
	for binary in "$@"
	do
		if [ ! -x "$binary" ]; then
			printf '%s:%s\n' "$program_name" "The binary `$binary` is not present" 1>&2
			local EX_OSFILE=72
			exit $EX_OSFILE
		fi
	done
}

depends rm mkdir
alpine_linux_download_prepare()
{
	rm -rf "$reproducible_temporaryFolderPath"
	mkdir -m 0700 -p "$reproducible_temporaryFolderPath"

	_alpine_linux_download_prepare_rebuild()
	{
		local folderPath="$1"
		local usesPackages="$2"
		local usesBusyboxStaticBinaries="$3"

		if ! reproducible_cachedVersion "$folderPath"; then
			rm -rf "$folderPath"
			mkdir -m 0700 -p "$folderPath"
		fi

		if $usesPackages; then
			if ! reproducible_cachedPackages "$folderPath"; then
				rm -rf "$folderPath"
				mkdir -m 0700 -p "$folderPath"
			fi
		fi

		if $usesBusyboxStaticBinaries; then
			if ! reproducible_cachedBusyboxStaticBinaries "$folderPath"; then
				rm -rf "$folderPath"
				mkdir -m 0700 -p "$folderPath"
			fi
		fi
	}

	_alpine_linux_download_prepare_rebuild "$reproducible_extractedInitramfsFolderPath" false false
	_alpine_linux_download_prepare_rebuild "$reproducible_extractedPackagesFolderPath" true true
	_alpine_linux_download_prepare_rebuild "$reproducible_packagesFolderPath" true false
	_alpine_linux_download_prepare_rebuild "$reproducible_indexFolderPath" false false
	_alpine_linux_download_prepare_rebuild "$reproducible_mirrorFolderPath" false false
}

depends mv
alpine_linux_download_downloadNetbootFile()
{
	local fileName="$1"

	# Can also be 'virt'
 	local variant='vanilla'
	environment_download "$reproducible_temporaryFolderPath" "$reproducible_releasesMirror"/"$netbootFolderName"/"$fileName"-"$variant"
	mv "$reproducible_temporaryFolderPath"/"$fileName"-"$variant" "$reproducible_mirrorFolderPath"/"$fileName"
}

alpine_linux_download_downloadNetboot()
{
	local fileName
	for fileName in vmlinuz initramfs modloop config System.map
	do
		alpine_linux_download_downloadNetbootFile "$fileName"
	done
}

alpine_linux_download_downloadApkIndex()
{
	local repositoryVariant="$1"

	local repositoryMirror
	reproducible_repositoryMirror "$repositoryVariant"

	environment_download "$reproducible_mirrorFolderPath" "${repositoryMirror}/${reproducible_architecture}/APKINDEX.tar.gz"
}

depends tar
alpine_linux_download_extractApkIndex()
{
	tar -x -f "$reproducible_mirrorFolderPath"/APKINDEX.tar.gz -C "$reproducible_temporaryFolderPath" APKINDEX
}

depends sort rm
alpine_linux_download_convertApkIndex()
{
	# Package name.
	local valueFor_P=''

	# Version.
	local valueFor_V=''

	# Licence.
	local valueFor_L=''

	# Dependencies.
	local valueFor_D=''

	# Package provides.
	local valueFor_p=''

	# Automatic Install Condition.
	local valueFor_i=''

	# Note that some shells are limited to file descriptors 0 to 9 inclusive.

	exec 3>"$reproducible_temporaryFolderPath"/APKINDEX.depends-so.raw
	exec 4>"$reproducible_temporaryFolderPath"/APKINDEX.depends-pc.raw
	printf '' >"$reproducible_temporaryFolderPath"/APKINDEX.depends-binary.raw
	exec 5>"$reproducible_temporaryFolderPath"/APKINDEX.depends-conflicts-package-or-virtual-package.raw
	exec 6>"$reproducible_temporaryFolderPath"/APKINDEX.depends-package-or-virtual-package.raw

	exec 7>"$reproducible_temporaryFolderPath"/APKINDEX.provides-so.raw
	exec 8>"$reproducible_temporaryFolderPath"/APKINDEX.provides-pc.raw
	exec 9>"$reproducible_temporaryFolderPath"/APKINDEX.provides-command.raw
	printf '' >"$reproducible_temporaryFolderPath"/APKINDEX.provides-binary.raw
	printf '' >"$reproducible_temporaryFolderPath"/APKINDEX.provides-virtual-package.raw

	local key
	local value
	while IFS=':' read -r key value 
	do
		# See https://wiki.alpinelinux.org/wiki/Apk_spec for definitions of the keys.
		case "$key" in

			'P')
				valueFor_P="$value"
			;;

			'V')
				valueFor_V="$value"
			;;

			'L')
				valueFor_L="$value"
			;;

			'D')
				valueFor_D="$value"

				sed 's/ /\n/g' >"$reproducible_temporaryFolderPath"/valueFor_D <<-EOF
					$valueFor_D
				EOF

				local depends
				while IFS='' read -r depends
				do
					case "$depends" in

						# eg o:libc.musl-x86_64.so.1 .
						'so:'*)
							local withoutPrefix="${depends#so:*}"
							local so="${withoutPrefix%%=*}"
							printf '%s\t%s\t%s\n' "$valueFor_P" "$so" >&3
						;;

						# eg p:so:libnftables.so.0 .
						'pc:'*)
							local withoutPrefix="${depends#pc:*}"
							local pc="${withoutPrefix%%=*}"
							printf '%s\t%s\t%s\n' "$valueFor_P" "$pc" >&4
						;;

						# eg /bin/sh .
						'/'*)
							printf '%s\t%s\n' "$valueFor_P" "$depends" >>"$reproducible_temporaryFolderPath"/APKINDEX.depends-binary.raw
						;;

						'')
							:
						;;

						# eg !hylafax .
						'!'*)
							local packageOrVirtualPackageName="${depends#!*}"
							printf '%s\t%s\n' "$valueFor_P" "$packageOrVirtualPackageName" >&5
						;;

						# Package or virtual package.
						*)
							local packageOrVirtualPackageName
							local operator
							local version
							case "$depends" in

								# TODO: BUG: >, >= may be parsed incorrectly.

								# eg openrc>=0.24.1-r6 .
								*'>='*)
									packageOrVirtualPackageName="${depends%%>=*}"
									operator='>='
									version="${depends##*>=}"
								;;

								# (no examples known).
								*'<='*)
									packageOrVirtualPackageName="${depends%%<=*}"
									operator='<='
									version="${depends##*<=}"
								;;

								# eg freeradius>3 .
								*'>'*)
									packageOrVirtualPackageName="${depends%%>*}"
									operator='>'
									version="${depends##*>}"
								;;

								# eg py2-alabaster<0.8 .
								*'<'*)
									packageOrVirtualPackageName="${depends%%<*}"
									operator='<'
									version="${depends##*<}"
								;;

								# eg git=2.20.1-r0 .
								*'='*)
									packageOrVirtualPackageName="${depends%%=*}"
									operator='='
									version="${depends##*=}"
								;;

								# eg python3 .
								*)
									packageOrVirtualPackageName="$depends"
									operator=''
									version=''
								;;

							esac

							printf '%s\t%s\t%s\t%s\n' "$valueFor_P" "$packageOrVirtualPackageName" "$operator" "$version" >&6
						;;

					esac
				done <"$reproducible_temporaryFolderPath"/valueFor_D
			;;

			'p')
				valueFor_p="$value"

				sed 's/ /\n/g' >"$reproducible_temporaryFolderPath"/valueFor_p <<-EOF
					$valueFor_p
				EOF

				local provides
				while IFS='' read -r provides
				do
					case "$provides" in

						# eg o:libc.musl-x86_64.so.1=1  where the value after '=' is the real version.
						'so:'*)
							local withoutPrefix="${provides#so:*}"
							local so="${withoutPrefix%%=*}"
							local realVersion="${withoutPrefix#*=}"
							printf '%s\t%s\t%s\n' "$so" "$valueFor_P" "$realVersion" >&7
						;;

						# eg p:so:libnftables.so.0=0.0.0  where the value after '=' is the real version.
						'pc:'*)
							local withoutPrefix="${provides#pc:*}"
							local pc="${withoutPrefix%%=*}"
							local realVersion="${withoutPrefix#*=}"
							printf '%s\t%s\t%s\n' "$pc" "$valueFor_P" "$realVersion" >&8
						;;

						# eg cmd:nft .
						'cmd:'*)
							local cmd="${provides#cmd:*}"
							printf '%s\t%s\n' "$cmd" "$valueFor_P" >&9
						;;

						# eg /bin/sh .
						'/'*)
							printf '%s\t%s\n' "$provides" "$valueFor_P" >>"$reproducible_temporaryFolderPath"/APKINDEX.provides-binary.raw
						;;

						'')
							:
						;;

						# Virtual packages, eg p:nginx-rtmp  rsyslog-fmhttp=8.40.0-r4	
						*)
							# TODO: BUG: Versioned virtual packages are not supported.
							printf '%s\t%s\n' "$provides" "$valueFor_P" >>"$reproducible_temporaryFolderPath"/APKINDEX.provides-virtual-package.raw
						;;

					esac
				done <"$reproducible_temporaryFolderPath"/valueFor_p
			;;

			'i')
				valueFor_i="$value"
			;;

			'')
				if [ -n "$valueFor_P" ]; then

					printf '%s\t' "$valueFor_P"
					printf '%s\t' "$valueFor_V"
					printf '%s\t' "$valueFor_L"
					printf '%s\n' "$valueFor_i"
				fi

				valueFor_P=''
				valueFor_V=''
				valueFor_L=''
				valueFor_D=''
				valueFor_p=''
				valueFor_i=''
			;;

			*)
				:
			;;

		esac
	done <"$reproducible_temporaryFolderPath"/APKINDEX >"$reproducible_temporaryFolderPath"/APKINDEX.packages.raw

	exec 3<&-
	exec 4<&-
	exec 5<&-

	exec 6<&-
	exec 7<&-
	exec 8<&-
	exec 9<&-

	local fileNamePart
	for fileNamePart in 'packages' 'provides-so' 'provides-pc' 'provides-binary' 'provides-command' 'provides-virtual-package' 'depends-so' 'depends-pc' 'depends-binary' 'depends-conflicts-package-or-virtual-package' 'depends-package-or-virtual-package'
	do
		sort -k1,2 -t "$(printf '\t')" -h "$reproducible_temporaryFolderPath"/APKINDEX.${fileNamePart}.raw >"$reproducible_indexFolderPath"/${fileNamePart}.tsv
	done

	set +f
		rm -rf "$reproducible_temporaryFolderPath"/APKINDEX.*.raw "$reproducible_temporaryFolderPath"/valueFor_*
	set -f
}

depends awk rm
alpine_linux_download_findApkPackage()
{
	local packagesToDownloadFilePath="$1"
	local package="$2"

	printf '%s\n' "$package"

	local dependsOnPackagesFilePath="$reproducible_temporaryFolderPath"/"$package".depends-on-packages

	if [ ! -f "$dependsOnPackagesFilePath" ]; then
		
		_alpine_linux_download_findApkPackage_awkDependency()
		{
			dependencyKind="$1"

			resultsFilePath="$reproducible_temporaryFolderPath"/"$dependencyKind".dependency
			local awkProgram='BEGIN {FS="\t"}; $1=="'"${package}"'" {print $2}'
			awk "$awkProgram" "$reproducible_indexFolderPath"/depends-"$dependencyKind".tsv >"$resultsFilePath"
		}

		_alpine_linux_download_findApkPackage_awkProvides()
		{
			local dependsOn
			while IFS='' read -r dependsOn
			do
				local awkProgram='BEGIN {FS="\t"}; $1=="'"${dependsOn}"'" {print $2}'
				awk "$awkProgram" "$reproducible_indexFolderPath"/provides-"$dependencyKind".tsv
			done <"$resultsFilePath"
			rm "$resultsFilePath"
		}

		{
			local dependencyKind
			local resultsFilePath

			# Find the binaries depended on.
			_alpine_linux_download_findApkPackage_awkDependency binary
			_alpine_linux_download_findApkPackage_awkProvides

			# Find the PCs depended on.
			_alpine_linux_download_findApkPackage_awkDependency pc
			_alpine_linux_download_findApkPackage_awkProvides

			# Find the SOs depended on.
			_alpine_linux_download_findApkPackage_awkDependency so
			_alpine_linux_download_findApkPackage_awkProvides

			# TODO: BUG: Package conflicts are not supported.

			# Find the packages depended on.
			_alpine_linux_download_findApkPackage_awkDependency package-or-virtual-package
			local packageDependedOn
			local packageDependedOnWasVirtualPackage
			while IFS='' read -r packageDependedOn
			do
				local awkProgram='BEGIN {FS="\t"}; $1=="'""${packageDependedOn}'" {print $2}'
				packageDependedOnWasVirtualPackage="$(awk "$awkProgram" "$reproducible_indexFolderPath"/provides-virtual-package.tsv)"
				if [ -n "$packageDependedOnWasVirtualPackage" ]; then
					printf '%s\n' "$packageDependedOnWasVirtualPackage"
				else
					printf '%s\n' "$packageDependedOn"
				fi
			done <"$resultsFilePath"
			rm "$resultsFilePath"

		} >"$dependsOnPackagesFilePath"
	fi

	while IFS='' read -r packageDependedOn
	do
		alpine_linux_download_findApkPackage "$packagesToDownloadFilePath" "$packageDependedOn"
	done <"$dependsOnPackagesFilePath"
}

depends awk rm
alpine_linux_download_findApkPackages()
{
	local packagesToDownloadFilePath="$reproducible_temporaryFolderPath"/packages-to-download

	# Ensure top-level packages are in installation order.
	local topLevelPackagesReversedFilePath="$reproducible_temporaryFolderPath"/alpine-linux.packages.reversed
	environment_tac "$reproducible_packagesFilePath" >"$topLevelPackagesReversedFilePath"

	{
		local package
		while IFS='' read -r package
		do
			alpine_linux_download_findApkPackage "$packagesToDownloadFilePath" "$package" 
		done <"$topLevelPackagesReversedFilePath"
	} >"$packagesToDownloadFilePath"
	set +f
		rm -rf "$reproducible_temporaryFolderPath"/*.depends-on-packages
	set -f
	rm "$topLevelPackagesReversedFilePath"

	# Ensure packages are in installation order.
	environment_tac "$packagesToDownloadFilePath" >"$packagesToDownloadFilePath".reversed
	rm "$packagesToDownloadFilePath"

	# Eliminate duplicate packages.
	awk '!already_seen_lines[$0]++' "$packagesToDownloadFilePath".reversed >"$packagesToDownloadFilePath"-and-in-installation-order

	# Add versioning information
	local package
	while IFS='' read -r package
	do
		local awkProgram='BEGIN {FS="\t"; OFS="\t"}; $1=="'"${package}"'" {print $1,$2}'
		awk "$awkProgram" "$reproducible_indexFolderPath"/packages.tsv
	done <"$packagesToDownloadFilePath"-and-in-installation-order >"$reproducible_packagesFolderPath"/packages-to-install-and-in-installation-order
	rm "$packagesToDownloadFilePath"-and-in-installation-order 
}

alpine_linux_download_downloadApkPackage()
{
	local repositoryVariant="$1"
	local apkName="$2"
	local apkVersion="$3"

	local apkFileName="${apkName}-${apkVersion}.apk"

	local repositoryMirror
	reproducible_repositoryMirror "$repositoryVariant"

	environment_download "$reproducible_packagesFolderPath" "${repositoryMirror}/${reproducible_architecture}/${apkFileName}"
}

depends tar
depends_binary /bin/sh
alpine_linux_download_extractApk()
{
	local apkName="$1"
	local apkVersion="$2"

	local apkFileName="${apkName}-${apkVersion}.apk"

	tar -x -f "$reproducible_packagesFolderPath"/"$apkFileName" -C "$reproducible_extractedPackagesFolderPath" 2>/dev/null
}

depends cp
alpine_linux_download_downloadMirror()
{
	if reproducible_cachedVersion "$reproducible_mirrorFolderPath"; then
		return 0
	fi

	alpine_linux_download_downloadNetboot
	alpine_linux_download_downloadApkIndex 'main'

	cp "$reproducible_versionFilePath" "$reproducible_mirrorVersionFilePath"
}

depends cp
alpine_linux_download_indexApks()
{
	if reproducible_cachedVersion "$reproducible_indexFolderPath"; then
		return 0
	fi

	alpine_linux_download_extractApkIndex

	alpine_linux_download_convertApkIndex

	cp "$reproducible_versionFilePath" "$reproducible_indexVersionFilePath"
}

depends cp
alpine_linux_download_downloadApkPackages()
{
	if reproducible_cachedVersion "$reproducible_packagesFolderPath"; then
		return 0
	fi

	alpine_linux_download_findApkPackages

	local package
	local version
	local tab='	'
	while IFS="$tab" read -r package version
	do
		alpine_linux_download_downloadApkPackage 'main' "$package" "$version"
	done <"$reproducible_packagesFolderPath"/packages-to-install-and-in-installation-order

	cp "$reproducible_versionFilePath" "$reproducible_packagesVersionFilePath"
	cp "$reproducible_packagesFilePath" "$reproducible_packagesPackagesFilePath"
}

depends rm mkdir ln chmod cp
alpine_linux_download_extractApks()
{
	if reproducible_cachedPackages "$reproducible_extractedPackagesFolderPath"; then
		return 0
	fi

	local package
	local version
	local tab='	'
	while IFS="$tab" read -r package version
	do
		alpine_linux_download_extractApk "$package" "$version"
	done <"$reproducible_packagesFolderPath"/packages-to-install-and-in-installation-order

	# Clean up
	rm "$reproducible_extractedPackagesFolderPath"/.PKGINFO
	set +f
		rm "$reproducible_extractedPackagesFolderPath"/.SIGN.*
		rm -rf "$reproducible_extractedPackagesFolderPath"/.post-* "$reproducible_extractedPackagesFolderPath"/.trigger
	set -f

	# Assumes busybox-static is one of the packages.
	local binary
	local folder
	local tab='	'
	while IFS="$tab"' ' read -r binary folder
	do

		local symlinkSource
		case "$folder" in

			/bin|/sbin)
				symlinkSource=../bin/busybox.static
			;;

			/usr/bin|/usr/sbin)
				symlinkSource=../../bin/busybox.static
			;;
			
			*)
				local EX_SOFTWARE=70
				fail $EX_SOFTWARE "Unknown folder '${folder}' for binary '$binary'"
			;;

		esac
		if [ ! -d "${reproducible_extractedPackagesFolderPath}${folder}" ]; then
			mkdir -m 0700 -p "${reproducible_extractedPackagesFolderPath}${folder}"
		fi
		ln -s "$symlinkSource" "${reproducible_extractedPackagesFolderPath}${folder}/${binary}"

	done <"$reproducible_busyboxStaticBinariesFilePath"

	# Adjust permissions.
	chmod -R g-rwx,o-rwx "$reproducible_extractedPackagesFolderPath"

	cp "$reproducible_versionFilePath" "$reproducible_extractedPackagesVersionFilePath"
	cp "$reproducible_packagesFilePath" "$reproducible_extractedPackagesPackagesFilePath"
	cp "$reproducible_busyboxStaticBinariesFilePath" "$reproducible_extractedPackagesBusyboxStaticBinariesFilePath"
}

depends rm mkdir gunzip cpio
alpine_linux_download_extractInitramfs()
{
	if reproducible_cachedVersion "$reproducible_extractedInitramfsVersionFilePath"; then
		return 0
	fi
	
	rm -rf "$reproducible_extractedInitramfsFolderPath"
	mkdir -m 0700 -p "$reproducible_extractedInitramfsFolderPath"
	
	cd "$reproducible_extractedInitramfsFolderPath" 1>/dev/null 2>/dev/null
	
		gunzip -c -k "$reproducible_mirrorFolderPath"/initramfs | cpio -i 2>/dev/null
	
	cd - 1>/dev/null 2>/dev/null

	cp "$reproducible_versionFilePath" "$reproducible_extractedInitramfsVersionFilePath"
}

depends rm cp
alpine_linux_download_main()
{
	cd "$(_program_path_find)"/.. 1>/dev/null 2>/dev/null

	. "$(pwd)"/functions/reproducible.functions

	local environment_parseCommandLineArguments_message="${program_name}:  Downloads and caches an Alpine Linux kernel, initramfs and packages for a basic known build environment.

Usage: ${program_name} -h | --help
Usage: ${program_name} [-c|--configuration /path/to/configuration/folder] [-o|--output /path/to/output/folder]

If the configuration folder path is not provided, it defaults to program_location/configuration.

If the output folder path is not provided, it defaults to program_location/output. The output folder path is created as necessary.
"
	_additionalArgumentsCallback()
	{
		environment_parseCommandLineArguments_errorHelp "Unexpected argument '$key'"
	}
	_positionalArgumentsCallback()
	{
		if [ $# -gt 0 ]; then
			environment_parseCommandLineArguments_errorHelp "Positional arguments are not supported"
		fi
	}
	local reproducible_positionalArgumentsStartAt
	local reproducible_configurationFolderPath
	local reproducible_outputFolderPath
	reproducible_parseCommandLineArguments _additionalArgumentsCallback _positionalArgumentsCallback "$@"
	
	reproducible_validateCommandLineArguments

	local reproducible_temporaryFolderPath
	local reproducible_versionFilePath
	local reproducible_packagesFilePath
	local reproducible_busyboxStaticBinariesFilePath
	local reproducible_mirrorFolderPath
	local reproducible_mirrorVersionFilePath
	local reproducible_indexFolderPath
	local reproducible_indexVersionFilePath
	local reproducible_packagesFolderPath
	local reproducible_packagesVersionFilePath
	local reproducible_extractedPackagesFolderPath
	local reproducible_extractedPackagesVersionFilePath
	local reproducible_extractedPackagesPackagesFilePath
	local reproducible_extractedPackagesBusyboxStaticBinariesFilePath
	local reproducible_extractedInitramfsFolderPath
	local reproducible_extractedInitramfsVersionFilePath
	local reproducible_majorVersion
	local reproducible_minorVersion
	local reproducible_revisionVersion
	local reproducible_apkToolsVersion
	local reproducible_versionMirror
	local reproducible_releasesMirror
	local reproducible_architecture
	reproducible_setEnvironmentVariables

	alpine_linux_download_prepare

	local netbootFolderName
	reproducible_netbootFolderName

	alpine_linux_download_downloadMirror
	
	alpine_linux_download_extractInitramfs

	alpine_linux_download_indexApks

	alpine_linux_download_downloadApkPackages

	alpine_linux_download_extractApks

	rm -rf "$reproducible_temporaryFolderPath"
}

alpine_linux_download_main "$@"

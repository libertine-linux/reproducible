#!/usr/bin/env sh
# This file is part of reproducible. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/reproducible/master/COPYRIGHT. No part of reproducible, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2019 The developers of reproducible. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/reproducible/master/COPYRIGHT.


set -e
set -f
set -u

program_name="reproducible-qemu"

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				local recursionDepth=0
				_program_path_resolve_symlinks_recursively()
				{
					local unresolvedPath="$1"
					
					recursionDepth=$((recursionDepth + 1))
					
					if [ $recursionDepth -gt 10 ]; then
						printf '%s\n' 'Recursion to depths greater than 10 is not allowed when resolving links.'
						return 1
					fi
					
					local potentialLinkDestination="$(readlink -- "$unresolvedPath")"
					
					if [ -z "$potentialLinkDestination" ]; then
						scriptPath="$unresolvedPath"
						return 0
					fi
					local linkDestination="$potentialLinkDestination"
					local parentFolderPath="${unresolvedPath%/*}"
					
					if [ "$parentFolderPath" = "$unresolvedPath" ]; then
						_program_path_resolve_symlinks_recursively "$linkDestination"
					else
						case "$linkDestination" in
														
							/*)
								_program_path_resolve_symlinks_recursively "$linkDestination"
							;;
							
							*)
								_program_path_resolve_symlinks_recursively "$parentFolderPath"/"$linkDestination"
							;;
							
						esac
					fi
				}

				scriptPath="$0"
				_program_path_resolve_symlinks_recursively "$scriptPath"

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

fail()
{
	local exitCode="$1"
	local message="$2"
	
	printf '%s:FAIL:%s\n' "$program_name" "$message" 1>&2
	exit $exitCode
}

depends()
{
	local binary
	for binary in "$@"
	do
		if ! command -v "$binary" 1>/dev/null 2>/dev/null; then
			printf '%s:%s\n' "$program_name" "The binary `$binary` is not on the PATH" 1>&2
			local EX_OSFILE=72
			exit $EX_OSFILE
		fi
	done
}

# For documentation only.
depends_provided_by_macports()
{
	:
}

depends rm cp
depends_provided_by_macports unsquashfs
reproducible_qemu_extractModloop()
{
	if reproducible_cachedVersion "$reproducible_qemu_extractedModloopFolderPath"; then
		return 0
	fi
	rm -rf "$reproducible_qemu_extractedModloopFolderPath"
	
		unsquashfs -dest "$reproducible_qemu_extractedModloopFolderPath" -quiet -no-progress -no-xattrs "$reproducible_mirrorFolderPath"/modloop
	
	cp "$reproducible_versionFilePath" "$reproducible_qemu_extractedModloopFolderPath"/.alpine-linux.version
}

depends mkdir
reproducible_qemu_createQemuFolderIfNeeded()
{
	mkdir -m 0700 -p "$reproducible_qemu_qemuFolderPath"
}

reproducible_qemu_modloopLinuxKernelVersion()
{
	cd "$reproducible_qemu_extractedModloopFolderPath"/modules 1>/dev/null 2>/dev/null
		modloopLinuxKernelVersion="$(ls -1 | head -n 1)"
	cd - 1>/dev/null 2>/dev/null
}

depends grep tr tail
reproducible_qemu_recurseModuleDependenciesChild()
{
	local listOfModulesFilePath="$1"
	
	local moduleWeWant
	while IFS= read -r moduleWeWant
	do
		printf '%s\n' "$moduleWeWant"
		
		local nextListOfModulesFilePath="$reproducible_qemu_kernelModulesFolderPath"/modules-to-find.$count
		grep -m 1 '^'"$moduleWeWant"': ' "$moduleDependenciesFilePath" | tr -d ':' | tr ' ' '\n' | tail -n +2 >"$nextListOfModulesFilePath"
		
		count=$((count + 1))
		reproducible_qemu_recurseModuleDependenciesChild "$nextListOfModulesFilePath"
	
	done <"$listOfModulesFilePath"
}

depends rm tail awk
reproducible_qemu_recurseModuleDependencies()
{
	local modloopLinuxKernelVersion="$1"
	
	sourceFolderPath="$reproducible_qemu_extractedModloopFolderPath"/modules/"$modloopLinuxKernelVersion"
	moduleDependenciesFilePath="$sourceFolderPath"/modules.dep
	
	(
		local count=0
		reproducible_qemu_recurseModuleDependenciesChild "$reproducible_kernelModulesFilePath"
		set +f
			rm -rf "$reproducible_qemu_kernelModulesFolderPath"/modules-to-find.*
		set -f
	) | tail -r | awk '!duplicates[$0]++' >"$reproducible_qemu_modulesToUseInLoadOrderFilePath"
}

depends rm mkdir ls head cp
reproducible_qemu_parseModulesDepAndFindModules()
{
	if reproducible_cachedKernelModules "$reproducible_qemu_kernelModulesFolderPath"; then
		return 0
	fi
	rm -rf "$reproducible_qemu_kernelModulesFolderPath"
	
		mkdir -m 0700 -p "$reproducible_qemu_kernelModulesFolderPath"
	
		local modloopLinuxKernelVersion
		reproducible_qemu_modloopLinuxKernelVersion
	
		local sourceFolderPath
		local moduleDependenciesFilePath
		local dependenciesFilePath
		reproducible_qemu_recurseModuleDependencies "$modloopLinuxKernelVersion"
	
		local moduleWeWant
		while IFS= read -r moduleWeWant
		do
			local parentFolderPath="$(dirname "$moduleWeWant")"
			mkdir -m 0700 -p "$reproducible_qemu_kernelModulesFolderPath"/"$parentFolderPath" 
			cp "$sourceFolderPath"/"$moduleWeWant" "$reproducible_qemu_kernelModulesFolderPath"/"$parentFolderPath"
		done <"$reproducible_qemu_modulesToUseInLoadOrderFilePath"
	
		cp "$reproducible_kernelModulesFilePath" "$reproducible_qemu_kernelModulesFolderPath"/.alpine-linux.kernel-modules
}

depends cat sed chmod
reproducible_qemu_makeInitFileInInitialRamdisk()
{
	local initFilePath="$reproducible_chrootFolderPath"/init

	{
		cat <<-'EOF'
			#!/bin/sh
			
			set -e
			set -f
			set -u
			
			# HOME, TERM and SHLVL are already set and available to export.
			# PATH, HOSTNAME, IFS, OPTIND, PS1, PS2, PS4 and PWD are non-exported variables available.
			export PATH='/usr/sbin:/sbin:/usr/bin:/bin'
			export LOGNAME='currentuser'
			export USER='currentuser'
			export HOME='/home/currentuser'
			export LANG=C.UTF-8
			export LANGUAGE=en_US:en
		EOF
		sed 's,^,busybox insmod /lib/modules/,g' "$reproducible_qemu_modulesToUseInLoadOrderFilePath"
		cat <<-'EOF'
		
			busybox mount -t proc -o noexec,nosuid,nodev proc /proc
			busybox mount -t sysfs -o noexec,nosuid,nodev sysfs /sys
			busybox mount -t devtmpfs -o exec,nosuid,mode=0755,size=2M devtmpfs /dev
			busybox mkdir -m 0700 -p /dev/pts
			busybox mount -t devpts -o noexec,nosuid,mode=0620,gid=5 devpts /dev/pts
			busybox mkdir -m 0700 -p /dev/shm
			busybox mount -t tmpfs -o noexec,nosuid,nodev shm /dev/shm
			
			busybox rm -rf /lib/modules
		EOF
		cat <<-EOF
			diskIndex="${reproducible_qemu_disk0Index}"
			diskUuid="${reproducible_qemu_disk0Uuid}"
		EOF
		cat <<-'EOF'
			diskType="ext2"
			diskMountPath=/mnt/"disk${diskIndex}"
			busybox mkdir -m 0700 -p "$diskMountPath"
			busybox mount -t "$diskType" UUID="$diskUuid" "$diskMountPath"
			
			cd "$diskMountPath" 1>/dev/null 2>/dev/null
				set +f
				for file in *
				do
					set -f
					if [ ! -e "$file" ]; then
						continue
					fi
					
					if [ -e /"$file" ]; then
						busybox rm -rf /"$file"
					fi
					
					busybox ln -s "$diskMountPath" /"$file"
				done
				set -f
			cd - 1>/dev/null 2>/dev/null
			
			set +e
				/su-command
				exitCode=$?
			set -e
			
			if [ $exitCode -eq 0 ]; then
				busybox poweroff -f
			fi
			
			# Uses QEMU's ISA debug exit device to return an exit code to the invoking process.
			# Choice of seek and count correspond to hexadecimal values in option `-device isa-debug-exit,iobase=0xf4,iosize=0x01` passed to QEMU; see https://docs.rs/qemu-exit/0.1.0/qemu_exit/
			if [ $exitCode -gt 255 ]; then
				exitCode=255
			fi
			printf \\"$(printf '%03o' "$exitCode")" | busybox dd of=/dev/port bs=1 seek=244 count=1 status=noxfer
		EOF
	} >"$initFilePath"
	
	chmod 0700 "$initFilePath"
}

depends_provided_by_macports rsync
reproducible_qemu_copyKernelModulesToInitialRamdisk()
{	
	rsync --quiet --recursive --links --perms --times --executability --sparse \
		--numeric-ids --chown=0:0 --chmod=D0700,Fg-rwx,Fo-rwx \
		--exclude=load-order "$reproducible_qemu_kernelModulesFolderPath"/ "$reproducible_chrootFolderPath"/lib/modules/
}

depends find cpio
reproducible_qemu_createInitialRamdiskCpioArchive()
{
	cd "$reproducible_chrootFolderPath" 1>/dev/null 2>/dev/null
		find . | cpio -o -H 'newc' -R 0:0 2>/dev/null >"$reproducible_qemu_initialRamdiskCpioArchiveFilePath"
	cd - 1>/dev/null 2>/dev/null
}

depends_provided_by_macports qemu-img mke2fs
reproducible_qemu_createDisk0IfNeeded()
{
	if [ ! -f "$reproducible_qemu_disk0FilePath" ]; then
		qemu-img create -f raw "$reproducible_qemu_disk0FilePath" "$reproducible_qemu_disk0Size" 1>/dev/null 2>/dev/null
		mke2fs -b 1024 -j -L "$reproducible_qemu_disk0Name" -o Linux -q -t ext2 -U "$reproducible_qemu_disk0Uuid" -F "$reproducible_qemu_disk0FilePath"
	fi
}

depends mkdir
reproducible_qemu_createDisk0MountPathIfNeeded()
{
	mkdir -m 0700 -p "$reproducible_qemu_disk0MountFolderPath"
}

depends umount
reproducible_qemu_mountDisk0AndUse()
{
	local callback="$1"
	shift 1
	
	_reproducible_qemu_unmountDisk0()
	{
		set +e
			umount -f "$reproducible_qemu_disk0MountFolderPath"
		set -e
	}
	trap _reproducible_qemu_unmountDisk0 EXIT SIGTERM
		
		fuse-ext2 "$reproducible_qemu_disk0FilePath" "$reproducible_qemu_disk0MountFolderPath" -o rw+,force,noappledouble,noapplexattr,jail_symlinks,volname="Reproducible QEMU Disk ${reproducible_qemu_disk0Index}"
	
			"$callback" "$@"
		
		_reproducible_qemu_unmountDisk0
		
	trap - EXIT SIGTERM
}

depends sudo
depends_provided_by_macports rsync
reproducible_qemu_createOrUpdateDisk0WithMounts()
{
	reproducible_qemu_createDisk0IfNeeded
	
	reproducible_qemu_createDisk0MountPathIfNeeded
	
	_reproducible_qemu_reproducible_qemu_createOrUpdateDisk0WithMounts_synchronizeMounts()
	{
		local mountFromFolderPath
		local mountToFolderPath
		local _recursiveMount
		while IFS=':' read -r mountFromFolderPath mountToFolderPath _recursiveMount
		do
			if [ -z "$mountFromFolderPath" ]; then
				continue
			fi
			
			sudo -p "Password for user '%u' to rsync as 0:0: " mkdir -m 0700 -p "${reproducible_qemu_disk0MountFolderPath}${mountToFolderPath}"
			
			sudo -p "Password for user '%u' to rsync as 0:0: " rsync \
				--quiet --recursive --links --perms --times --executability --sparse \
				--numeric-ids --chown=0:0 --chmod=D0700,Fg-rwx,Fo-rwx \
				--delete --delete-excluded --delete-after /
				"$mountFromFolderPath"/ "${reproducible_qemu_disk0MountFolderPath}${mountToFolderPath}"/
		done <<-EOF
			${reproducible_mount}
		EOF
	}
	reproducible_qemu_mountDisk0AndUse _reproducible_qemu_reproducible_qemu_createOrUpdateDisk0WithMounts_synchronizeMounts
}

depends uname
depends_provided_by_macports qemu-system-x86_64
reproducible_qemu_execute()
{
	case "$(uname)" in
		
		Darwin)
			set -- -accel hvf -accel hax -accel tcg
		;;
		
		Linux)
			set -- -accel kvm -cpu host
		;;
		
		*)
			set --
		;;
		
	esac
	
	# -nodefaults
	set -- "$@" \
		-name "reproducible-qemu" \
		-no-user-config \
		-no-reboot \
		-nographic \
		-kernel "$reproducible_mirrorFolderPath"/vmlinuz \
		-append "root=/dev/$reproducible_qemu_disk0Name console=ttyS0 tsc=unstable kernel.panic=1 quiet loglevel=0" \
		-initrd "$reproducible_qemu_initialRamdiskCpioArchiveFilePath" \
		-drive file="$reproducible_qemu_disk0FilePath",index="$reproducible_qemu_disk0Index",media=disk,format=raw,snapshot=off \
			-machine pc-q35-4.1 \
			-device isa-debug-exit,iobase=0xf4,iosize=0x01 \
			-m "$reproducible_qemu_memorySize" \
			-k en-us
	
	exec qemu-system-x86_64 "$@"
}

reproducible_qemu_commandLineArguments()
{
	local environment_parseCommandLineArguments_message="${program_name}:  Enters an Alpine Linux QEMU virtual instance.

Usage: ${program_name} -h | --help
Usage: ${program_name} [-c|--configuration /path/to/configuration/folder] [-o|--output /path/to/output/folder [-m|--mount from1:to1:recursive1,from2:to2:recursive2]]

If the configuration folder path is not provided, it defaults to program_location/sample-configuration.

If the output folder path is not provided, it defaults to program_location/output. The output folder path is created as necessary.

The mount argument is a triplet of from folder path and to folder path and true/false for recursive mounting. It can be repeated.
from folder path and to folder path should not contain colons or new lines.
"
	reproducible_mount=""
	_additionalArgumentsCallback()
	{
		case "$key" in
			-m|--mount)
				environment_parseCommandLineArguments_missingArgument "$@"
				reproducible_mount="${reproducible_mount}
${value}"
				_additionalArgumentsCallback_shiftUp=1
			;;

			--mount=*)
				value="${key##--mount=}"
				reproducible_mount="${reproducible_mount}
${value}"
			;;

			-m*)
				environment_parseCommandLineArguments_alreadyParsed $reproducible_configurationFolderPathParsed
				value="${key##-m}"
				reproducible_mount="${reproducible_mount}
${value}"
			;;

			*)
				environment_parseCommandLineArguments_errorHelp "Unexpected argument '$key'"
			;;
		esac
	}
	
	_positionalArgumentsCallback()
	{
		if [ $# -eq 0 ]; then
			environment_parseCommandLineArguments_errorHelp "At least one positional argument should be specified (an absolute path to a binary to run in the chroot)"
		fi
	}

	reproducible_configurationFolderPath="$(pwd)"/sample-configuration
	reproducible_outputFolderPath="$(pwd)"/output
	reproducible_parseCommandLineArguments _additionalArgumentsCallback _positionalArgumentsCallback "$@"
}

reproducible_qemu_main()
{
	cd "$(_program_path_find)"/.. 1>/dev/null 2>/dev/null

	. "$(pwd)"/functions/reproducible.functions

	local reproducible_positionalArgumentsStartAt
	local reproducible_configurationFolderPath
	local reproducible_outputFolderPath
	local reproducible_mount=""
	reproducible_qemu_commandLineArguments "$@"
	
	reproducible_validateCommandLineArguments

	local reproducible_temporaryFolderPath
	local reproducible_versionFilePath
	local reproducible_packagesFilePath
	local reproducible_busyboxStaticBinariesFilePath
	local reproducible_mirrorFolderPath
	local reproducible_mirrorVersionFilePath
	local reproducible_indexFolderPath
	local reproducible_indexVersionFilePath
	local reproducible_packagesFolderPath
	local reproducible_packagesVersionFilePath
	local reproducible_extractedPackagesFolderPath
	local reproducible_extractedPackagesVersionFilePath
	local reproducible_extractedPackagesPackagesFilePath
	local reproducible_extractedPackagesBusyboxStaticBinariesFilePath
	local reproducible_extractedInitramfsFolderPath
	local reproducible_extractedInitramfsVersionFilePath
	local reproducible_qemu_extractedModloopFolderPath
	local reproducible_qemu_qemuFolderPath
	local reproducible_qemu_kernelModulesFolderPath
	local reproducible_kernelModulesFilePath
	local reproducible_extractedKernelModulesFilePath
	local reproducible_majorVersion
	local reproducible_minorVersion
	local reproducible_revisionVersion
	local reproducible_apkToolsVersion
	local reproducible_versionMirror
	local reproducible_releasesMirror
	local reproducible_architecture
	local reproducible_chrootFolderPath
	reproducible_setEnvironmentVariables
	
	reproducible_macports
	
	local reproducible_qemu_memorySize='1G'
	local reproducible_qemu_initialRamdiskCpioArchiveFilePath="$reproducible_qemu_qemuFolderPath"/initramfs.cpio
	local reproducible_qemu_modulesToUseInLoadOrderFilePath="$reproducible_qemu_kernelModulesFolderPath"/load-order

	local reproducible_qemu_disk0Uuid='d2c4a813-877e-44d1-8b3b-0b32139d7ee6'
	local reproducible_qemu_disk0Index='0'
	local reproducible_qemu_disk0Name='sda'
	local reproducible_qemu_disk0Size='1G'
	local reproducible_qemu_disk0MountFolderPath
	local reproducible_qemu_disk0FilePath
	
	local reproducible_qemu_disk0FilePath="$reproducible_qemu_qemuFolderPath"/disk${reproducible_qemu_disk0Index}.ext2.raw.img
	local reproducible_qemu_disk0MountFolderPath="$reproducible_qemu_qemuFolderPath"/disk0
	
	reproducible_commonChrootSetup "$@"
	
	reproducible_qemu_extractModloop
	
	reproducible_qemu_createQemuFolderIfNeeded
	
	reproducible_qemu_parseModulesDepAndFindModules
	
	reproducible_qemu_createOrUpdateDisk0WithMounts
	
	reproducible_qemu_makeInitFileInInitialRamdisk
	
	reproducible_qemu_copyKernelModulesToInitialRamdisk
	
	reproducible_qemu_createInitialRamdiskCpioArchive
	
	reproducible_qemu_execute
}

reproducible_qemu_main "$@"
